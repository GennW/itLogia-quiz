/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _router_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./router.js */ \"./src/router.js\");\n // Импортируем класс Router из модуля router.js\n\nclass App {\n  constructor() {\n    // Определяем конструктор класса App\n    this.router = new _router_js__WEBPACK_IMPORTED_MODULE_0__.Router(); // Создаем экземпляр класса Router и сохраняем его в свойстве router\n\n    // Добавляем слушатель события DOMContentLoaded, который вызовет метод handleRouteChanging при загрузке контента\n    window.addEventListener('DOMContentLoaded', this.handleRouteChanging.bind(this));\n\n    // Добавляем слушатель события popstate, который также вызовет метод handleRouteChanging при изменении истории переходов (например, нажатии кнопки \"назад\" в браузере)\n    window.addEventListener('popstate', this.handleRouteChanging.bind(this));\n  }\n\n  // Определяем метод handleRouteChanging, который будет открывать маршрут с использованием объекта router\n  handleRouteChanging() {\n    this.router.openRoute(); // Вызываем метод openRoute объекта router\n  }\n}\n\nnew App(); // Создаем новый экземпляр класса App и не сохраняем его в переменной, просто вызываем конструктор класса для инициализации\n\n//     // constructor() {\n//     //     this.router = new Router();\n//     //     window.addEventListener('DOMContentLoaded', () => {\n//     //         this.router.openRoute();\n//     //     });\n//     //     window.addEventListener('popstate', () => {\n//     //         this.router.openRoute();\n//     //     });\n//     // }\n\n//# sourceURL=webpack:///./src/app.js?");

/***/ }),

/***/ "./src/components/choice.js":
/*!**********************************!*\
  !*** ./src/components/choice.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Choice: () => (/* binding */ Choice)\n/* harmony export */ });\n/* harmony import */ var _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/url-manager.js */ \"./src/utils/url-manager.js\");\n\nclass Choice {\n  constructor() {\n    this.quizzes = [];\n\n    // устанавливаем значения url из choice\n    this.routeParams = _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__.UrlManager.getQueryParams();\n    // проверяем  значения \n    _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__.UrlManager.checkUserData(this.routeParams);\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', 'https://testologia.site/get-quizzes', false);\n    xhr.send();\n    if (xhr.status === 200 && xhr.responseText) {\n      try {\n        this.quizzes = JSON.parse(xhr.responseText);\n      } catch (error) {\n        location.href = '#/';\n      }\n      this.processQuizzes();\n    } else {\n      location.href = '#/';\n    }\n  }\n  processQuizzes() {\n    // строим сруктуру html из данных с бекенда\n    const choiceOptionsElement = document.getElementById('choice-options');\n    console.log(this.quizzes);\n    if (this.quizzes && this.quizzes.length > 0) {\n      // создаем сруктуру html \n      this.quizzes.forEach(quiz => {\n        const that = this;\n        const choiceOptionElement = document.createElement('div');\n        choiceOptionElement.className = 'choice-option';\n        choiceOptionElement.setAttribute('data-id', quiz.id);\n        choiceOptionElement.onclick = function () {\n          that.chooseQuiz(this);\n        };\n        const choiceOptionTextElement = document.createElement('div');\n        choiceOptionTextElement.className = 'choice-option-text';\n        choiceOptionTextElement.innerText = quiz.name;\n        const choiceOptionArrowElement = document.createElement('div');\n        choiceOptionArrowElement.className = 'choice-option-arrow';\n        const choiceOptionImgElement = document.createElement('img');\n        choiceOptionImgElement.setAttribute('src', 'img/arrow.svg');\n        choiceOptionImgElement.setAttribute('alt', 'arrow');\n\n        // вложение элементов\n        choiceOptionArrowElement.appendChild(choiceOptionImgElement);\n        choiceOptionElement.appendChild(choiceOptionTextElement);\n        choiceOptionElement.appendChild(choiceOptionArrowElement);\n        choiceOptionsElement.appendChild(choiceOptionElement);\n      });\n    }\n  }\n  chooseQuiz(element) {\n    const dataId = element.getAttribute('data-id');\n    if (dataId) {\n      // переписываем правильные параметры следующей страницы url\n      location.href = '#/test?name=' + this.routeParams.name + '&lastName=' + this.routeParams.lastName + '&email=' + this.routeParams.email + '&id=' + dataId;\n    }\n  }\n}\n\n//# sourceURL=webpack:///./src/components/choice.js?");

/***/ }),

/***/ "./src/components/form.js":
/*!********************************!*\
  !*** ./src/components/form.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Form: () => (/* binding */ Form)\n/* harmony export */ });\nclass Form {\n  constructor() {\n    this.agreeElement = null;\n    this.processElement = null;\n    this.fields = [{\n      name: 'name',\n      id: 'name',\n      element: null,\n      regex: /^[А-Я][а-я]+\\s*$/,\n      valid: false\n    }, {\n      name: 'lastName',\n      id: 'last-name',\n      element: null,\n      regex: /^[А-Я][а-я]+\\s*$/,\n      valid: false\n    }, {\n      name: 'email',\n      id: 'email',\n      element: null,\n      regex: /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/,\n      valid: false\n    }];\n    const that = this;\n    this.fields.forEach(item => {\n      item.element = document.getElementById(item.id);\n      item.element.onchange = function () {\n        that.validateField.call(that, item, this);\n      };\n    });\n    this.processElement = document.getElementById('process');\n    this.processElement.onclick = function () {\n      that.processForm();\n    };\n    this.agreeElement = document.getElementById('agree');\n    this.agreeElement.onchange = function () {\n      that.validateForm();\n    };\n  }\n  validateField(filed, element) {\n    if (!element.value || !element.value.match(filed.regex)) {\n      element.parentNode.style.borderColor = 'red';\n      filed.valid = false;\n    } else {\n      element.parentNode.removeAttribute('style');\n      filed.valid = true;\n    }\n    this.validateForm();\n  }\n  validateForm() {\n    const validForm = this.fields.every(item => item.valid);\n    const isValid = this.agreeElement.checked && validForm;\n    if (isValid) {\n      this.processElement.removeAttribute('disabled');\n    } else {\n      this.processElement.setAttribute('disabled', 'disabled');\n    }\n    return isValid;\n  }\n  processForm() {\n    if (this.validateForm()) {\n      let paramString = '';\n      this.fields.forEach(item => {\n        paramString += (!paramString ? '?' : '&') + item.name + '=' + item.element.value;\n      });\n      location.href = '#/choice' + paramString;\n      // lacation.href = 'choice.html?name=Alex&lastName=Platonov&lastName='\n    }\n  }\n}\n\n;\n\n//# sourceURL=webpack:///./src/components/form.js?");

/***/ }),

/***/ "./src/components/result.js":
/*!**********************************!*\
  !*** ./src/components/result.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Result: () => (/* binding */ Result)\n/* harmony export */ });\n/* harmony import */ var _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/url-manager.js */ \"./src/utils/url-manager.js\");\n\nclass Result {\n  constructor() {\n    this.routeParams = _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__.UrlManager.getQueryParams();\n    document.getElementById('result-score').innerText = this.routeParams.score + '/' + this.routeParams.total;\n\n    // выводим правильное сообщение о выполнении теста\n    const resultText = document.getElementById('result-title');\n    if (parseInt(this.routeParams.score) <= 3) {\n      resultText.innerText = 'Упс! Ты не прошёл тест!';\n    }\n  }\n}\n\n//# sourceURL=webpack:///./src/components/result.js?");

/***/ }),

/***/ "./src/components/test.js":
/*!********************************!*\
  !*** ./src/components/test.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Test: () => (/* binding */ Test)\n/* harmony export */ });\n/* harmony import */ var _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/url-manager.js */ \"./src/utils/url-manager.js\");\n// Импортируем класс UrlManager из файла url-manager.js\n\n\n// Экспортируем класс Test\nclass Test {\n  // Конструктор класса\n  constructor() {\n    // Инициализация переменных экземпляра класса\n    this.progressBarElement = null;\n    this.passButtonElement = null;\n    this.prevButtonElement = null;\n    this.nextButtonElement = null;\n    this.questionTitleElement = null;\n    this.optionsElement = null;\n    this.quiz = null;\n    this.currentQuestionIndex = 1;\n    this.userResult = [];\n    // Получаем параметры из URL choice\n    this.routeParams = _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__.UrlManager.getQueryParams();\n    // Проверяем и обрабатываем полученные параметры\n    _utils_url_manager_js__WEBPACK_IMPORTED_MODULE_0__.UrlManager.checkUserData(this.routeParams);\n\n    // Проверяем наличие идентификатора теста в параметрах URL\n    if (this.routeParams.id) {\n      const that = this;\n      const xhr = new XMLHttpRequest();\n\n      // Отправляем синхронный GET-запрос для получения данных о тесте\n      xhr.open('GET', 'https://testologia.site/get-quiz?id=' + this.routeParams.id, false);\n      xhr.send();\n      if (xhr.status === 200 && xhr.responseText) {\n        try {\n          // Разбираем полученные данные в формате JSON и сохраняем в переменной quiz\n          this.quiz = JSON.parse(xhr.responseText);\n        } catch (error) {\n          // Перенаправляем пользователя на главную страницу в случае ошибки\n          location.href = '#/';\n        }\n        // Запускаем тест при успешном получении данных\n        this.startQuiz();\n      } else {\n        // Перенаправляем пользователя на главную страницу в случае ошибки\n        location.href = '#/';\n      }\n    } else {\n      // Перенаправляем пользователя на главную страницу, если идентификатор теста отсутствует в URL\n      location.href = '#/';\n    }\n  }\n\n  // Метод для начала выполнения теста\n  startQuiz() {\n    // добавляем прогресс=бар\n    this.progressBarElement = document.getElementById('progress-bar');\n    // добавляем с сервера название теста\n    document.getElementById('pre-title').innerText = this.quiz.name;\n    console.log(this.quiz);\n    // заголовок вопроса\n    this.questionTitleElement = document.getElementById('title');\n    this.optionsElement = document.getElementById('options');\n\n    // обработчики на кнопик Дальше и Пропустить\n    this.nextButtonElement = document.getElementById('next');\n    // обработчик после нажатия с потерей конекста\n    this.nextButtonElement.onclick = this.move.bind(this, 'next');\n    this.passButtonElement = document.getElementById('pass');\n    // обработчик после нажатия с потерей конекста\n    this.passButtonElement.onclick = this.move.bind(this, 'pass');\n    this.prevButtonElement = document.getElementById('prev');\n    this.prevButtonElement.onclick = this.move.bind(this, 'prev');\n\n    // Подготавливаем прогресс-бар\n    this.prepareProgressBar();\n    // Отображаем первый вопрос\n    this.showQuestion();\n\n    // timer\n    // Получаем элемент с id \"timer\" и сохраняем его в переменной timerElement\n    const timerElement = document.getElementById('timer');\n    // Устанавливаем начальное значение счетчика\n    let seconds = 59;\n    // Объявляем переменную для хранения интервала\n    let interval;\n\n    // Функция для остановки таймера при возвращении на предыдущую страницу во время прохождения теста\n    function stopTimer() {\n      clearInterval(interval); // Останавливаем интервал\n    }\n\n    // Устанавливаем интервал для обновления счетчика и обновления отображаемого времени\n    interval = setInterval(function () {\n      seconds--; // Уменьшаем значение счетчика\n      timerElement.innerText = seconds; // Обновляем значение отображаемого времени\n      if (seconds === 0) {\n        clearInterval(interval); // Останавливаем интервал при достижении нуля\n        this.complete();\n      }\n    }, 1000); // Интервал обновления каждую секунду\n\n    // Добавляем обработчик события beforeunload (или unload) \n    window.onbeforeunload = function () {\n      stopTimer(); // Вызываем функцию остановки таймера при событии beforeunload\n    };\n  }\n\n  // Метод для создания прогресс-бара\n  prepareProgressBar() {\n    for (let i = 0; i < this.quiz.questions.length; i++) {\n      // рисуем элементы на странице\n      const itemElement = document.createElement('div');\n      // добавляем класс и если это первый то еще класс active\n      itemElement.className = 'test-progress-bar-item' + (i === 0 ? ' active' : '');\n      const itemCircleElement = document.createElement('div');\n      itemCircleElement.className = 'test-progress-bar-item-circle';\n      const itemTextElement = document.createElement('div');\n      itemTextElement.className = 'test-progress-bar-item-text';\n      itemTextElement.innerText = 'Вопрос' + (i + 1);\n\n      // иерархия\n      itemElement.appendChild(itemCircleElement);\n      itemElement.appendChild(itemTextElement);\n      this.progressBarElement.appendChild(itemElement);\n    }\n  }\n  showQuestion() {\n    // выводим активный вопрос по индексу так как первый индекс 0 значит -1\n    const activeQuestion = this.quiz.questions[this.currentQuestionIndex - 1];\n    this.questionTitleElement.innerHTML = '<span>Вопрос ' + this.currentQuestionIndex + ':</span> ' + activeQuestion.question;\n\n    // очищаем каждый раз при смене вопроса\n    this.optionsElement.innerHTML = '';\n    const that = this;\n\n    // проверяем есть ли сохраненный ответ в массиве данных userResult и сравниваем Id с еще раз выбранным ответом\n    const chosenOption = this.userResult.find(item => item.questionId === activeQuestion.id);\n\n    // создаем структуру ответов\n    activeQuestion.answers.forEach(answer => {\n      const optionElement = document.createElement('div');\n      optionElement.className = 'test-question-option';\n\n      // создаем input изменяя id на те которые приходят из бекенда\n      const inputId = 'answer-' + answer.id;\n      const inputElement = document.createElement('input');\n\n      // назначаем класс для обработки всех значений для дальнейшего сохранения  в move()\n      inputElement.className = 'option-answer';\n      inputElement.setAttribute('id', inputId);\n      inputElement.setAttribute('type', 'radio');\n      inputElement.setAttribute('name', 'answer');\n      inputElement.setAttribute('value', answer.id);\n\n      // если в совпадения найдены и в результатах сохраненных chosenOption.chosenAnswerId  \n      // и в текущих answer.id если хотим ответить заново то делаем его отмеченным\n      if (chosenOption && chosenOption.chosenAnswerId === answer.id) {\n        inputElement.setAttribute('checked', 'checked');\n      }\n\n      // при выборе ответа разблокируем кнопку дальше\n      inputElement.onchange = function () {\n        that.choseAnswer();\n      };\n      const labelElement = document.createElement('label');\n      labelElement.setAttribute('for', inputId);\n      labelElement.innerText = answer.answer;\n\n      // создаем вложенность\n      optionElement.appendChild(inputElement);\n      optionElement.appendChild(labelElement);\n      this.optionsElement.appendChild(optionElement);\n    });\n\n    // если нажать на Пропустить вопрос, чтобы не работала кнопка Дальше если ответа еще не было\n    if (chosenOption && chosenOption.chosenAnswerId) {\n      this.nextButtonElement.removeAttribute('disabled');\n    } else {\n      this.nextButtonElement.setAttribute('disabled', 'disabled');\n    }\n\n    // после поседнего вопроса меняем кнопку на Завершить\n    if (this.currentQuestionIndex === this.quiz.questions.length) {\n      this.nextButtonElement.innerText = 'Завершить';\n    } else {\n      this.nextButtonElement.innerText = 'Далее';\n    }\n    // кнопка Назад активна если вопрос не первый\n    if (this.currentQuestionIndex > 1) {\n      this.prevButtonElement.removeAttribute('disabled');\n    } else {\n      this.prevButtonElement.setAttribute('disabled', 'disabled');\n    }\n  }\n  choseAnswer() {\n    // при выборе ответа делаем кнопку активной\n    this.nextButtonElement.removeAttribute('disabled');\n  }\n  // функция для перехода на предыдущий или следущий вопрос\n  move(action) {\n    // Проверяем наличие вопросов и допустимость индекса текущего вопроса\n    if (this.quiz.questions && this.currentQuestionIndex > 0 && this.currentQuestionIndex <= this.quiz.questions.length) {\n      const activeQuestion = this.quiz.questions[this.currentQuestionIndex - 1];\n\n      // сохраняем введенные данные по ответам пользователя\n      // сначала ищем выбранный ответ chosenAnswer\n      // find не работает с коллекциями по этому array.from\n      const chosenAnswer = Array.from(document.getElementsByClassName('option-answer')).find(element => element.checked);\n      let chosenAnswerId = null; // если вопрос пропущен\n      // если ответ был выбран то сохраняем  в виде цифры id в chosenAnswerId\n      if (chosenAnswer && chosenAnswer.value) {\n        chosenAnswerId = Number(chosenAnswer.value);\n      }\n\n      // проверяем есть ли уже ответ\n      const existingResult = this.userResult.find(item => {\n        return item.questionId === activeQuestion.id;\n      });\n      if (existingResult) {\n        existingResult.chosenAnswerId = chosenAnswerId;\n      } else {\n        // сохраняем  в объект на каждый вопрос ответы по id\n        this.userResult.push({\n          // id вопроса на котором находится пользователь\n          questionId: activeQuestion.id,\n          chosenAnswerId: chosenAnswerId\n        });\n      }\n      ;\n      console.log(this.userResult);\n      if (action === 'next' || action === 'pass') {\n        // если не \n        this.currentQuestionIndex++; // переходим вперед\n      } else {\n        // если предыдущий prev\n        this.currentQuestionIndex--; // то назад к предыдущему вопросу\n      }\n      // проверка на последний вопрос, если индекс > чем количество вопросов\n      if (this.currentQuestionIndex > this.quiz.questions.length) {\n        this.complete();\n        return;\n      }\n      Array.from(this.progressBarElement.children).forEach((item, index) => {\n        const currentItemIndex = index + 1;\n        item.classList.remove('complete');\n        item.classList.remove('active');\n        if (currentItemIndex === this.currentQuestionIndex) {\n          item.classList.add('active');\n        } else if (currentItemIndex < this.currentQuestionIndex) {\n          item.classList.add('complete');\n        }\n      });\n\n      // после перехода отображаем следущий или предыдущий вопрос\n      this.showQuestion();\n    }\n  }\n  // завершение теста\n  complete() {\n    const xhr = new XMLHttpRequest();\n    xhr.open('POST', 'https://testologia.site/pass-quiz?id=' + this.routeParams.id, false);\n    xhr.setRequestHeader('Content-Type', 'application/json;charset=UTF-8');\n    xhr.send(JSON.stringify({\n      name: this.routeParams.name,\n      lastName: this.routeParams.lastName,\n      email: this.routeParams.email,\n      results: this.userResult\n    }));\n    if (xhr.status === 200 && xhr.responseText) {\n      let result = null;\n      try {\n        result = JSON.parse(xhr.responseText);\n      } catch (error) {\n        location.href = '#/';\n      }\n      if (result) {\n        console.log(result);\n        location.href = '#/result?score=' + result.score + '&total=' + result.total;\n      }\n    } else {\n      location.href = '#/';\n    }\n  }\n}\n\n// 50 m videoru\n\n//# sourceURL=webpack:///./src/components/test.js?");

/***/ }),

/***/ "./src/router.js":
/*!***********************!*\
  !*** ./src/router.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Router: () => (/* binding */ Router)\n/* harmony export */ });\n/* harmony import */ var _components_choice_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/choice.js */ \"./src/components/choice.js\");\n/* harmony import */ var _components_form_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/form.js */ \"./src/components/form.js\");\n/* harmony import */ var _components_result_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/result.js */ \"./src/components/result.js\");\n/* harmony import */ var _components_test_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/test.js */ \"./src/components/test.js\");\n// Импорт классов из соответствующих файлов\n\n\n\n\n\n// Объявление класса Router\nclass Router {\n  constructor() {\n    // Определение конструктора класса\n    this.routes = [\n    // Инициализация свойства \"routes\" массивом маршрутов\n    {\n      route: '#/',\n      // Путь маршрута для главной страницы\n      title: 'Главная',\n      // Заголовок страницы\n      template: 'templates/index.html',\n      // Шаблон страницы\n      styles: 'styles/index.css',\n      // Стили страницы\n      load: () => {// Функция загрузки страницы\n      } // Пустая функция загрузки для главной страницы\n    }, {\n      route: '#/form',\n      // Путь маршрута для страницы регистрации\n      title: 'Регистрация',\n      // Заголовок страницы\n      template: 'templates/form.html',\n      // Шаблон страницы\n      styles: 'styles/form.css',\n      // Стили страницы\n      load: () => {\n        // Функция загрузки страницы\n        new _components_form_js__WEBPACK_IMPORTED_MODULE_1__.Form(); // Создание экземпляра класса \"Form\" при загрузке маршрута /form\n      }\n    }, {\n      route: '#/choice',\n      // Путь маршрута для страницы выбора теста\n      title: 'Выбор теста',\n      // Заголовок страницы\n      template: 'templates/choice.html',\n      // Шаблон страницы\n      styles: 'styles/choice.css',\n      // Стили страницы\n      load: () => {\n        // Функция загрузки страницы\n        new _components_choice_js__WEBPACK_IMPORTED_MODULE_0__.Choice(); // Создание экземпляра класса \"Choice\" при загрузке маршрута /choice\n      }\n    }, {\n      route: '#/test',\n      // Путь маршрута для страницы прохождения теста\n      title: 'Прохождение теста',\n      // Заголовок страницы\n      template: 'templates/test.html',\n      // Шаблон страницы\n      styles: 'styles/test.css',\n      // Стили страницы\n      load: () => {\n        // Функция загрузки страницы\n        new _components_test_js__WEBPACK_IMPORTED_MODULE_3__.Test(); // Создание экземпляра класса \"Test\" при загрузке маршрута /test\n      }\n    }, {\n      route: '#/result',\n      // Путь маршрута для страницы результатов\n      title: 'Результаты',\n      // Заголовок страницы\n      template: 'templates/result.html',\n      // Шаблон страницы\n      styles: 'styles/result.css',\n      // Стили страницы\n      load: () => {\n        // Функция загрузки страницы\n        new _components_result_js__WEBPACK_IMPORTED_MODULE_2__.Result(); // Создание экземпляра класса \"Result\" при загрузке маршрута /result\n      }\n    }];\n  }\n\n  async openRoute() {\n    // Определение асинхронной функции openRoute\n    const newRoute = this.routes.find(item => {\n      // Находим объект маршрута по хэшу URL\n      return item.route === window.location.hash.split('?')[0]; // Сравнение пути с текущим хэшем URL\n      // добавляем split('?')[0] так как newRoute=indefined из-за попадания параметров имени и емейл\n      // window.location.hash попадает #/choice?name=Имя&lastName=Фамилия&email=kind-vlad@list.ru\"\n      // split('?') разбивает полученную строку хэша URL на массив подстрок, используя символ \"?\" в качестве разделителя.\n      //[0] возвращает первый элемент массива, то есть часть строки до символа \"?\" а именно \"#/choice\".\n    });\n\n    if (!newRoute) {\n      // Если маршрут не найден\n      window.location.href = '#/'; // Перенаправляем на главную страницу\n      return; // Прерываем выполнение функции\n    }\n\n    // Загружаем HTML-шаблон нового маршрута\n\n    document.getElementById('content').innerHTML = await fetch(newRoute.template).then(response => response.text());\n    document.getElementById('styles').setAttribute('href', newRoute.styles); // Устанавливаем стили нового маршрута\n    document.getElementById('page-title').innerText = newRoute.title; // Устанавливаем заголовок страницы\n    newRoute.load(); // Вызываем функцию загрузки нового маршрута\n  }\n}\n\n// import { Choice } from \"./components/choice.js\";\n// import { Form } from \"./components/form.js\"\n// import { Result } from \"./components/result.js\";\n// import { Test } from \"./components/test.js\";\n\n// export class Router {\n//     constructor() {\n//         this.routes = [\n//             {\n//                 route: '#/',\n//                 title: 'Главная',\n//                 template: 'templates/index.html',\n//                 styles: 'styles/index.css',\n//                 laod: () => {\n//                 }\n//             },\n//             {\n//                 route: '#/form',\n//                 title: 'Регистрация',\n//                 template: 'templates/form.html',\n//                 styles: 'styles/form.css',\n//                 load: () => {\n//                     new Form();\n//                 }\n//             },\n//             {\n//                 route: '#/choice',\n//                 title: 'Выбор теста',\n//                 template: 'templates/choice.html',\n//                 styles: 'styles/choice.css',\n//                 load: () => {\n//                     new Choice();\n//                 }\n//             },\n//             {\n//                 route: '#/test',\n//                 title: 'Прохождение теста',\n//                 template: 'templates/test.html',\n//                 styles: 'styles/test.css',\n//                 load: () => {\n//                     new Test();\n//                 }\n//             },\n//             {\n//                 route: '#/result',\n//                 title: 'Результаты',\n//                 template: 'templates/result.html',\n//                 styles: 'styles/result.css',\n//                 load: () => {\n//                     new Result();\n//                 }\n//             },\n//         ]\n//     }\n\n//     async openRoute() {\n//         const newRoute = this.routes.find(item => {\n\n//             // console.log('что в  window.location.hash', window.location.hash)\n//             // console.log('результат split(\"?\")', window.location.hash.split('?'))\n//             // console.log('результат [0]', window.location.hash.split('?')[0])\n//             // console.log('результат [1]', window.location.hash.split('?')[1])\n//             return item.route === window.location.hash.split('?')[0];\n//         });\n\n//         if (!newRoute) {\n//             window.location.href = '#/';\n//             return;\n//         }\n\n//         document.getElementById('content').innerHTML =\n//             await fetch(newRoute.template).then(response => response.text());\n//         document.getElementById('styles').setAttribute('href', newRoute.styles);\n//         document.getElementById('page-title').innerText = newRoute.title;\n//         newRoute.load();\n\n//     }\n\n// }\n\n// //27:30 видео\n\n//# sourceURL=webpack:///./src/router.js?");

/***/ }),

/***/ "./src/utils/url-manager.js":
/*!**********************************!*\
  !*** ./src/utils/url-manager.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UrlManager: () => (/* binding */ UrlManager)\n/* harmony export */ });\nclass UrlManager {\n  // делаем методы класса статическими, чтобы не создавать экземпляры этого класса\n  // а использовать по названию \n  // так как этот класс только структурирует функции (методы), которые в отдельности не связаны с экземплярами класса\n  static getQueryParams() {\n    const qs = document.location.hash.split('+').join(' ');\n    let params = {};\n    let tokens;\n    let re = /[?&]([^=]+)=([^&]*)/g;\n\n    //выполняется до тех пор, пока регулярное выражение re находит совпадения в строке qs. \n    //На каждой итерации цикла декодируются и добавляются параметры (название и значение) в объект params.\n    while (tokens = re.exec(qs)) {\n      params[decodeURIComponent(tokens[1])] = decodeURIComponent(tokens[2]);\n    }\n    //функция возвращает объект params, содержащий все параметры из строки запроса в виде пар \"ключ: значение\".\n    return params;\n  }\n  static checkUserData(params) {\n    if (!params.name || !params.lastName || !params.email) {\n      location.href = '#/';\n    }\n  }\n}\n\n// 46 минута видео\n\n/*\r\nПосле вызова tokens = re.exec(qs), массив tokens будет содержать следующую информацию:\r\n\r\ntokens[0] содержит полное совпадение, то есть весь фрагмент строки, который соответствует регулярному выражению.\r\ntokens[1] содержит значение параметра \"name\", раскодированное из %D0%90%D0%B0%D0%B0.\r\ntokens[2] содержит значение параметра \"lastName\", также раскодированное из %D0%90%D0%B0%D0%B0.\r\ntokens[3] содержит значение параметра \"email\".\r\nТаким образом, элементы массива tokens будут содержать информацию, извлеченную с использованием регулярного выражения, \r\nсоответствующую указанному URL.\r\n\r\n\r\n\r\nМетод decodeURIComponent() используется для декодирования URI компонентов, то есть для преобразования закодированных \r\nсимволов обратно в их исходное представление. \r\n\r\ndecodeURIComponent() вызывается для декодирования пары ключ=значение, извлеченной при помощи exec(), \r\nперед добавлением её в объект params.\r\nПример:\r\nЕсли у вас есть строка name=%D0%90%D0%B0%D0%B0, то метод decodeURIComponent() преобразует её обратно в исходное значение.\r\n В данном случае, %D0%90%D0%B0%D0%B0 будет преобразовано в Ааа.\r\nТаким образом, decodeURIComponent() помогает преобразовать закодированные URI компоненты \r\n(например, символы Unicode или специальные символы, закодированные при помощи encodeURIComponent()) \r\nобратно в их исходное представление для дальнейшей работы с ними в вашем коде.\r\n*/\n\n//# sourceURL=webpack:///./src/utils/url-manager.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/app.js");
/******/ 	
/******/ })()
;